// Code generated by MockGen. DO NOT EDIT.
// Source: orders_usecase.go

// Package orders_usecase is a generated GoMock package.
package orders_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/alexgaas/order-reward/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetOrderLog mocks base method.
func (m *MockRepository) GetOrderLog(ctx context.Context, login string) ([]domain.OrderLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderLog", ctx, login)
	ret0, _ := ret[0].([]domain.OrderLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderLog indicates an expected call of GetOrderLog.
func (mr *MockRepositoryMockRecorder) GetOrderLog(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderLog", reflect.TypeOf((*MockRepository)(nil).GetOrderLog), ctx, login)
}

// GetOrders mocks base method.
func (m *MockRepository) GetOrders(ctx context.Context, login string) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, login)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockRepositoryMockRecorder) GetOrders(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockRepository)(nil).GetOrders), ctx, login)
}

// SaveOrder mocks base method.
func (m *MockRepository) SaveOrder(ctx context.Context, login string, order domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", ctx, login, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockRepositoryMockRecorder) SaveOrder(ctx, login, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockRepository)(nil).SaveOrder), ctx, login, order)
}

// WithdrawOrder mocks base method.
func (m *MockRepository) WithdrawOrder(ctx context.Context, login string, orderLog domain.OrderLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawOrder", ctx, login, orderLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawOrder indicates an expected call of WithdrawOrder.
func (mr *MockRepositoryMockRecorder) WithdrawOrder(ctx, login, orderLog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawOrder", reflect.TypeOf((*MockRepository)(nil).WithdrawOrder), ctx, login, orderLog)
}
